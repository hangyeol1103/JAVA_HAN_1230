DAY 01

Git
	- 회원가입
	- 저장소 생성
	- 클론을 통해 학원 pc에 복제(집에서도 클론을 통해 복제)
	- fetch를 클릭 후 pull 그리고 작업하기
	- 새로운 내용이 있으면 Pull을 클릭해서 업데이트
	- 작업
	- 작업한 내역을 커밋을 통해 이력으로 남김
	- 저장소에 업데이트하기 위해 푸쉬

자바
	- JDK 설치
	- 이클립스를 설치
	- 프로젝트 생성
	- 패키지 생성(메일)
	- 예제 파일 생성(.java)
	- 예제 작성
	- 실행(Ctrl + F11)

비트
	- 0,1을 저장하는 공간
1바이트
	- 8비트

1비트 - 2가지
2비트 - 4가지 - 2^2
3비트 - 8가지 - 2^3

1바이트 - 2^8
2바이트 - 2^16
4바이트 - 2^32
8바이트 - 2^64


00000000 맨 앞은 부호비트 / 나머지 7자리가 수를 표현

양의 정수 10을 바이트로 표현하면

-> 00001010

1의 보수는 0과 1을 반대로 하고
2의 보수는 1의보수에 1을 더한다 
그리고 나온 값이 그 수의 음의 정수이다

10을 예로 들면

00001010을 1의 보수로하면
11110101이고 여기서 2의 보수를 취하면
11110110이 10의 2의 보수인 -10이다.

보수는 보고 넘어가면 됨.

리터럴 => 그 자체로 값을 의미

int score = 95;

- score : 변수, 95 : 리터럴
누가봐도 95인 것.

---------------------------------------------------------
day02일차 Scanner부분 <※>

scanner는 외부에서 땡겨와서 쓰는거
자동 추가는 ctrl+shift+o

<콘솔로 할 때는 println보다는 printf로 하는게 더 깔끔하다고 하심.>
콘솔 -> 밑에다가 입력하는 거

Scanner scan = new Scanner(System.in) 문구와 함께 써야함.
scan.next().charAt(0)에서
.charAt(0) => charAt(0)은 문자열의 첫 번째 문자를 얻고자 할 때 사용되는 메소드입니다.


정수 -> 정수면 scan.nextInt()
실수 -> 실수면 scan.nextDouble()로 쓰면 됨.
단어 -> String에서 next()는 공백을 제외한 단어를 가져옴
문자 -> scan.next().charAt(0) => 0번째 단어를 가져옴. 즉, 첫번째 단어임.
문장 -> scan.nextLine()으로 근데 이것은 enter까지 가져옴. 
따라서 출력 자체가 엔터가 되어 줄바꿈이 되어있음. 두개를 써야함. 

next는 공백을 빼고 앞에서부터 자신이 필요한 것을 찾아서 가져옴.

- ex11 질문
앞에 ""가 왜 들어가는지

""가 없으면 1 + "+" 형태가 되어
숫자 + (문자열 "+")가 숫자화 되어서 결과값이 46이라는 엉뚱하게 나옴.
따라서
=> ""를 추가함으로 "1"(문자열 1과) + "+" num2로 진행이 되면 올바른 답이 나오기에
추가했 던 것. 근데 중간에 " "을 넣음으로써 앞에 ""는 없애도 됐음.

 ---------------------------------------------------------
Day 03일

println은 하나씩 엔터 출력되는 것 같고
print는 옆으로 쭉 나열 하지만 띄어쓰기로 보려면 " "까지 뒤에 붙여주기.
즉 print는 한 눈에 쉽게 보기 좋아보이려고 할 때 씀.

random함수를 쓸 때 2가지 방법

1. int r = (int)(Math.random() * (max - min + 1) + min);

2. Random random = new Random();
   r = random.nextInt(max - min + 1) + min;//random.nextInt(a)는 0에서 a-1사이의 랜덤한 정수를 생성

둘 중 편한거 쓰면됨.

무한루프
=> for ( ; ; )

<for 문하고 while 문 아무튼 반복문 복습 개 많이 해야함.>

Continue문 => 쉽게 말해서 
if(조건식)
{
    continue;
}
실행문;

if 안에 있는 조건식을 만족한다면 -> 증감식으로 올라가서 
-> 실행문이 출력이 안되고,

if 안에 있는 조건식이 만족을 하지 않는다면 -> 증감식으로 올라가지 않고 
-> 실행문을 출력한다.

While문
while(조건식)
{
    ~~~
}
실행문;

조건식 안에 있는 것이 true 즉, 계속 된다면
~~~을 계속해서 실행하다가 , false인 순간이 온다면
밑의 실행문을 작동함.



최소 공배수랑 최대 공약수 복습!
Ex 15 ~ ex 21까지 복습!